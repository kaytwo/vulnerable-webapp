---
import Base from "../layouts/Base.astro";
import { type Comment, openDb } from "../lib/db.ts";

const db = openDb();

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const comment = formData.get("comment");

  // Vulnerable to stored XSS: Insert comment without sanitization or parameterization
  db.exec(`INSERT INTO comments (content) VALUES ('${comment}')`);

  // Fixed: Insert comment with parameterization
  // db.prepare("INSERT INTO comments (content) VALUES (?)").run(comment);

  // redirect to GET /comments to prevent form resubmission
  return Astro.redirect("/comments");
}

const comments = db.prepare("SELECT content FROM comments").all() as Comment[];

---

<Base>
  <h1>Stored XSS Example with SQLite</h1>
  <form method="POST" action="/comments">
    <textarea name="comment" rows="4" cols="50" placeholder="Enter your comment"
    ></textarea><br />
    <button type="submit">Submit</button>
  </form>
  <h2>Comments:</h2>
  <ul>
    {
      /* the safe way to do this:
      {comments.map((comment) => <li>{comment.content}</li>)} */
    }
    {comments.map((comment) => <li set:html={comment.content} />)}
  </ul>
</Base>
